model User {
  uuid                  String           @id @default(uuid())
  email                 String           @unique
  phone_number          String?          @unique
  username              String?          @unique
  password_hash         String
  first_name            String
  last_name             String
  profile_picture       String?
  gender                Gender
  date_of_birth         DateTime?
  language              String           @default("en")
  timezone              String           @default("UTC")
  status                UserStatus       @default(active)
  email_verified        Boolean          @default(false)
  phone_verified        Boolean          @default(false)
  last_login_at         DateTime?
  failed_login_attempts Int              @default(0)
  last_failed_login_at  DateTime?
  created_at            DateTime         @default(now())
  updated_at            DateTime         @updatedAt
  deleted_at            DateTime?

  roles            UserRole[]
  user_permissions UserPermission[]
  verifications    UserVerification[]
  user_sessions    UserSession[]

  @@index([uuid])
  @@index([email])
  @@index([status])
  @@index([username])
}

model UserPermission {
  id            Int        @id @default(autoincrement())
  user_id       String
  permission_id Int
  granted_at    DateTime   @default(now())

  user          User       @relation(fields: [user_id], references: [uuid])
  permission    Permission @relation(fields: [permission_id], references: [id])
}

model UserRole {
  id          Int      @id @default(autoincrement())
  user_id     String
  role_id     Int
  assigned_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [uuid])
  role Role @relation(fields: [role_id], references: [id])
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  level           Int              @default(10)
  permissions     RolePermission[]
  users           UserRole[]
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt

  organization_id Int?
  // Add relation to Organization model if exists, e.g.:
  // organization Organization? @relation(fields: [organization_id], references: [id])
}

model Permission {
  id               Int              @id @default(autoincrement())
  name             String           @unique
  module           String
  action           String
  description      String?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  user_permissions UserPermission[]
  role_permissions RolePermission[]

  @@unique([module, action]) // prevent duplicate module-action combos
}

model RolePermission {
  id            Int        @id @default(autoincrement())
  role_id       Int
  permission_id Int

  role       Role       @relation(fields: [role_id], references: [id])
  permission Permission @relation(fields: [permission_id], references: [id])
}

model UserVerification {
  id                 Int      @id @default(autoincrement())
  user_id            String
  otp                String
  otp_expiry         DateTime
  verification_token String?
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  user User @relation(fields: [user_id], references: [uuid])
}

model UserSession {
  id            Int       @id @default(autoincrement())
  user_id       String
  session_token String    @unique
  device        String?
  browser       String?
  ip_address    String?
  location      String?
  is_active     Boolean   @default(true)
  logged_in_at  DateTime  @default(now())
  logged_out_at DateTime?
  expires_at    DateTime

  user User @relation(fields: [user_id], references: [uuid])

  @@index([user_id])
}

// Enums

enum Gender {
  male
  female
  other
}

enum UserStatus {
  active
  inactive
  suspended
  deleted
}
